{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { map, retry } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://jsonplaceholder.typicode.com/users';\n    this.moreParams = ['test', 'test2'];\n    this.deafultImage = 'https://robohash.org';\n  }\n  getUsers3() {\n    let myHeaders = new HttpHeaders({\n      'myheader': ['headervalue', 'value2']\n    }); //headery daje , arrar nieobowiązkowy\n    myHeaders = myHeaders.set('id', '1234'); //set daje nową rzecz, a nie update \n    myHeaders = myHeaders.append('id', '0000'); //dopisuje\n    let myParams = new HttpParams().set('page', '5').set('sort', 'true'); //dopisuje rzeczy do linku na koniec (patrz heders)\n    const theParams = {\n      ['testList']: this.moreParams\n    };\n    let myParams2 = new HttpParams({\n      fromObject: theParams\n    }); // wywołanie params z obiektu\n    myParams = myParams.append('name', 'junior'); //patrz na heders\n    return this.http.get(`${this.apiUrl}`, {\n      headers: myHeaders,\n      params: myParams2\n    });\n  }\n  getUsers2() {\n    return this.http.get(`${this.apiUrl}`, {\n      observe: 'events',\n      reportProgress: true\n    });\n  }\n  getUsers() {\n    return this.http.get(`${this.apiUrl}`).pipe(retry(3) // proóbuje 3 razy połączyć się ponownie \n    );\n  }\n  // getUsers(): Observable<User[]> {\n  //   return this.http.get<User[]>(`${this.apiUrl}`)\n  //   .pipe(\n  //     tap(users => console.log(users)),\n  //     map(users => users.map(user => ({\n  //       email: user.email,\n  //       website: user.website,\n  //       phone: user.phone,\n  //       image: `${this.deafultImage}/${user.username.toLowerCase()}`,\n  //       username: user.name,\n  //       name: user.name.toUpperCase(),\n  //       isAdmin: user.id === 10? 'admin': 'user',\n  //       searchKey: [user.name, user.username]\n  //     }))) //transformation\n  //   );\n  // }\n  getTextFile() {\n    return this.http.get(`assets/file.txt`, {\n      responseType: 'text'\n    });\n  }\n  getUser() {\n    return this.http.get(`${this.apiUrl}/1`).pipe(map(user => {\n      return {\n        ...user,\n        isAdmin: true,\n        searchKey: [user.name, user.username]\n      };\n    }));\n  }\n  createUser(user) {\n    return this.http.post(`${this.apiUrl}`, user);\n  }\n  updateUser(user) {\n    //put musisz dać wszystkie wartości bo reszta będzie domyślna\n    // różni się w zależności od api\n    return this.http.put(`${this.apiUrl}/${user.id}`, user);\n  }\n  patchUser(user) {\n    //patch nie  musisz dać wszystkie wartości\n    return this.http.patch(`${this.apiUrl}/${user.id}`, user);\n  }\n  deleteUser(id) {\n    //delete daje ci najczęściej boolean^\n    //void bo nic nie dostajemy w odpowiedzi od servera \n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","map","retry","UserService","constructor","http","getUsers3","myHeaders","set","append","myParams","theParams","moreParams","myParams2","fromObject","get","apiUrl","headers","params","getUsers2","observe","reportProgress","getUsers","pipe","getTextFile","responseType","getUser","user","isAdmin","searchKey","name","username","createUser","post","updateUser","put","id","patchUser","patch","deleteUser","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Praktykant2\\Desktop\\projekt\\angular\\http\\angularhttp\\src\\app\\service\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, map, retry, tap } from 'rxjs';\nimport { User } from '../interface/user';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class UserService {\n\n  private apiUrl = 'https://jsonplaceholder.typicode.com/users';\n  readonly moreParams = ['test', 'test2'];\n  readonly deafultImage= 'https://robohash.org';\n\n  constructor(private http: HttpClient) { }\n\n  getUsers3(): Observable<User[]> { //paczy na Usera czy się zmienia, zwraca <get> tablice z użytkownikami\n    let myHeaders = new HttpHeaders({ 'myheader': ['headervalue', 'value2'] }); //headery daje , arrar nieobowiązkowy\n    myHeaders = myHeaders.set('id', '1234'); //set daje nową rzecz, a nie update \n    myHeaders = myHeaders.append('id', '0000'); //dopisuje\n\n    let myParams = new HttpParams().set('page', '5').set('sort', 'true');//dopisuje rzeczy do linku na koniec (patrz heders)\n    const theParams = { ['testList']: this.moreParams };\n    let myParams2 = new HttpParams({ fromObject: theParams }); // wywołanie params z obiektu\n    myParams = myParams.append('name', 'junior'); //patrz na heders\n    return this.http.get<User[]>(`${this.apiUrl}`, { headers: myHeaders, params: myParams2 });\n  }\n\n  getUsers2(): Observable<HttpEvent<User[]>> {\n    return this.http.get<User[]>(`${this.apiUrl}`, { observe: 'events', reportProgress: true });\n  }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(`${this.apiUrl}`)\n      .pipe(\n        retry(3) // proóbuje 3 razy połączyć się ponownie \n      );\n  }\n  // getUsers(): Observable<User[]> {\n  //   return this.http.get<User[]>(`${this.apiUrl}`)\n  //   .pipe(\n  //     tap(users => console.log(users)),\n      \n  //     map(users => users.map(user => ({\n  //       email: user.email,\n  //       website: user.website,\n  //       phone: user.phone,\n  //       image: `${this.deafultImage}/${user.username.toLowerCase()}`,\n  //       username: user.name,\n  //       name: user.name.toUpperCase(),\n  //       isAdmin: user.id === 10? 'admin': 'user',\n  //       searchKey: [user.name, user.username]\n  //     }))) //transformation\n  //   );\n  // }\n\n  getTextFile(): Observable<string>{ // do plików tekstowyc np. \n    return this.http.get(`assets/file.txt`, {responseType: 'text'}); \n  }\n\n  getUser(): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/1`).pipe(\n      map(user => {\n        return { ...user, isAdmin: true, searchKey: [user.name, user.username] }\n      })\n    );\n  }\n\n  createUser(user: User): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}`, user)\n  }\n\n  updateUser(user: User): Observable<User> {\n    //put musisz dać wszystkie wartości bo reszta będzie domyślna\n    // różni się w zależności od api\n    return this.http.put<User>(`${this.apiUrl}/${user.id}`, user)\n  }\n\n  patchUser(user: User): Observable<User> {\n    //patch nie  musisz dać wszystkie wartości\n    return this.http.patch<User>(`${this.apiUrl}/${user.id}`, user)\n  }\n\n  deleteUser(id: number): Observable<void> {\n    //delete daje ci najczęściej boolean^\n    //void bo nic nie dostajemy w odpowiedzi od servera \n    return this.http.delete<void>(`${this.apiUrl}/${id}`)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}