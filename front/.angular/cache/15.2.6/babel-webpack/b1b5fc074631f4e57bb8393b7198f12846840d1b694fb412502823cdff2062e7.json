{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://jsonplaceholder.typicode.com/users';\n  }\n  getUsers() {\n    const myHeaders = new HttpHeaders({\n      'myeader': 'headervalue'\n    }); //headery daje\n    myHeaders.set('');\n    return this.http.get(`${this.apiUrl}`, {\n      headers: myHeaders\n    });\n  }\n  getUser() {\n    return this.http.get(`${this.apiUrl}/1`);\n  }\n  createUser(user) {\n    return this.http.post(`${this.apiUrl}`, user);\n  }\n  updateUser(user) {\n    //put musisz dać wszystkie wartości bo reszta będzie domyślna\n    // różni się w zależności od api\n    return this.http.put(`${this.apiUrl}/${user.id}`, user);\n  }\n  patchUser(user) {\n    //patch nie  musisz dać wszystkie wartości\n    return this.http.patch(`${this.apiUrl}/${user.id}`, user);\n  }\n  deleteUser(id) {\n    //delete daje ci najczęściej boolean^\n    //void bo nic nie dostajemy w odpowiedzi od servera \n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;AAQ5D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAE,4CAA4C;EAEpB;EAExCC,QAAQ;IACN,MAAMC,SAAS,GAAE,IAAIL,WAAW,CAAC;MAAC,SAAS,EAAE;IAAa,CAAC,CAAC,CAAC,CAAC;IAC9DK,SAAS,CAACC,GAAG,CAAC,EAAE,CAAC;IACjB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,GAAG,IAAI,CAACC,MAAM,EAAE,EAAE;MAACC,OAAO,EAAEJ;IAAS,CAAE,CAAC;EACvE;EAEAK,OAAO;IACL,OAAO,IAAI,CAACP,IAAI,CAACI,GAAG,CAAO,GAAG,IAAI,CAACC,MAAM,IAAI,CAAC;EAChD;EAEAG,UAAU,CAACC,IAAU;IACnB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAO,GAAG,IAAI,CAACL,MAAM,EAAE,EAAEI,IAAI,CAAC;EACrD;EAEAE,UAAU,CAACF,IAAU;IACf;IACD;IACH,OAAO,IAAI,CAACT,IAAI,CAACY,GAAG,CAAO,GAAG,IAAI,CAACP,MAAM,IAAII,IAAI,CAACI,EAAE,EAAE,EAAEJ,IAAI,CAAC;EAC/D;EAEAK,SAAS,CAACL,IAAU;IAClB;IACA,OAAO,IAAI,CAACT,IAAI,CAACe,KAAK,CAAO,GAAG,IAAI,CAACV,MAAM,IAAII,IAAI,CAACI,EAAE,EAAE,EAAEJ,IAAI,CAAC;EACjE;EAEAO,UAAU,CAACH,EAAU;IACnB;IACA;IACA,OAAO,IAAI,CAACb,IAAI,CAACiB,MAAM,CAAO,GAAG,IAAI,CAACZ,MAAM,IAAIQ,EAAE,EAAE,CAAC;EACvD;;AAnCWf,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAHV;AAAM","names":["HttpHeaders","UserService","constructor","http","getUsers","myHeaders","set","get","apiUrl","headers","getUser","createUser","user","post","updateUser","put","id","patchUser","patch","deleteUser","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Praktykant2\\Desktop\\projekt\\angular\\http\\angularhttp\\src\\app\\service\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport { User } from '../interface/user';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class UserService {\n\n  private apiUrl ='https://jsonplaceholder.typicode.com/users';\n  \n  constructor(private http: HttpClient) { }\n\n  getUsers(): Observable <User[]> { //paczy na Usera czy się zmienia, zwraca <get> tablice z użytkownikami\n    const myHeaders= new HttpHeaders({'myeader': 'headervalue'}); //headery daje\n    myHeaders.set('')\n    return this.http.get<User[]>(`${this.apiUrl}`, {headers: myHeaders });  \n  }\n\n  getUser(): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/1`)\n  }\n\n  createUser(user: User): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}`, user)\n  } \n\n  updateUser(user: User): Observable<User> {\n        //put musisz dać wszystkie wartości bo reszta będzie domyślna\n       // różni się w zależności od api\n    return this.http.put<User>(`${this.apiUrl}/${user.id}`, user)\n  }\n\n  patchUser(user: User): Observable<User> {\n    //patch nie  musisz dać wszystkie wartości\n    return this.http.patch<User>(`${this.apiUrl}/${user.id}`, user)\n  }\n\n  deleteUser(id: number): Observable<void> {\n    //delete daje ci najczęściej boolean^\n    //void bo nic nie dostajemy w odpowiedzi od servera \n    return this.http.delete<void>(`${this.apiUrl}/${id}`)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}