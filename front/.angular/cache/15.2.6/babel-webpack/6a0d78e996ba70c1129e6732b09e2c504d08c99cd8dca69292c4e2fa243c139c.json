{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TestInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    const API_TOKEN = 'feterytyutrewtyrytref';\n    const requestCopy = request.clone({\n      setHeaders: {\n        API_KEY: API_TOKEN\n      },\n      body: {\n        hello: 'world'\n      }\n    });\n    console.log(requestCopy);\n    return next.handle(requestCopy).pipe;\n  }\n}\nTestInterceptor.ɵfac = function TestInterceptor_Factory(t) {\n  return new (t || TestInterceptor)();\n};\nTestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TestInterceptor,\n  factory: TestInterceptor.ɵfac\n});","map":{"version":3,"mappings":";AAUA,OAAM,MAAOA,eAAe;EAE1BC,eAAe;EAEfC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,SAAS,GAAE,uBAAuB;IACxC,MAAMC,WAAW,GAACH,OAAO,CACzBI,KAAK,CAAC;MAACC,UAAU,EAAE;QAACC,OAAO,EAAEJ;MAAS,CAAC;MAAEK,IAAI,EAAE;QAACC,KAAK,EAAE;MAAO;IAAC,CAAC,CAAC;IACjEC,OAAO,CAACC,GAAG,CAACP,WAAW,CAAC;IACxB,OAAOF,IAAI,CAACU,MAAM,CAACR,WAAW,CAAC,CAACS,IAAI;EACtC;;AAVWf,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAgB,SAAfhB,eAAe;AAAA","names":["TestInterceptor","constructor","intercept","request","next","API_TOKEN","requestCopy","clone","setHeaders","API_KEY","body","hello","console","log","handle","pipe","factory"],"sourceRoot":"","sources":["C:\\Users\\Praktykant2\\Desktop\\projekt\\angular\\http\\angularhttp\\src\\app\\interceptor\\test.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class TestInterceptor implements HttpInterceptor {\n\n  constructor() {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const API_TOKEN ='feterytyutrewtyrytref';\n    const requestCopy=request.\n    clone({setHeaders: {API_KEY: API_TOKEN}, body: {hello: 'world'}})\n    console.log(requestCopy);\n    return next.handle(requestCopy).pipe;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}